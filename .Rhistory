upper_bound <- quantile(simulations, 0.975)
# Store half the range (margin of error)
margin_errors[i] <- (upper_bound - lower_bound) / 2
}
# Create a dataframe with results
simulation_results_p <- tibble(
p = p,
margin_of_error = margin_errors
)
view(simulation_results_n)
view(simulation_results_p)
####################################################################################################
# Lab 10
library(tidyverse)
####################################################################################################
# Task 1: Basic Simulation
# Use rbinom() to generate data
data_simulation_1 <- tibble(x=rbinom(10000, size = 1004, prob = 0.39)) /1004
# Plot a histogram of the data
ggplot(data = data_simulation_1, aes(x = x)) +
geom_histogram(
aes(y = ..density..),
) +
geom_density(
color = "purple"
) +
ggtitle("Data Simulation (Sample Size = 1004)")
# Shape is unimodal and centered around x=0.39
# mean(data_simulation_1$x)
# What is the range of the middle 95%?
lower_bound <- quantile(data_simulation_1$x, 0.025)
upper_bound <- quantile(data_simulation_1$x, 0.975)
middle_range <- upper_bound - lower_bound
# Range of middle 95% is ~0.06
margin_of_error = middle_range/2
# Margin of error is ~0.03
# This margin of error of ~3% is better than Gallup's margin of error of 4%
###########################################################
# Task 1 Part 2: Repeat Simulation for Double Sample Size
data_simulation_2 <- tibble(x=rbinom(10000, size = 1004*2, prob = 0.39)) /(1004*2)
# Plot a histogram of the data
ggplot(data = data_simulation_2, aes(x = x)) +
geom_histogram(
aes(y = ..density..),
) +
geom_density(
color = "purple"
) +
ggtitle("Data Simulation (Sample Size = 2008)")
# What do we notice about the shape?
# Shape is unimodal and centered around x=0.39
# mean(data_simulation_2$x)
# What is the range of the middle 95%?
lower_bound_2 <- quantile(data_simulation_2$x, 0.025)
upper_bound_2 <- quantile(data_simulation_2$x, 0.975)
middle_range_2 <- upper_bound_2 - lower_bound_2
# Range is ~0.06
margin_of_error_2 = middle_range_2/2
# Margin of error is ~2%
# This margin of error of ~2% is about equal to Gallup's margin of error of 2%
####################################################################################################
# Task 2: Resampling
# Create a df containing data from Gallup Survey
gallup_data <- tibble(
response = c(rep(1, 392), rep(2, 592), rep(0, 20))
)
# Perform Resampling
R = 10000
resamples <- tibble(p.hat = numeric(R))
for( i in 1:R){
# Take a resample
resample <- sample(x = gallup_data$response,
size = 1004,
replace = T)
resamples$p.hat[i] <- mean(resample==1)
}
# Plot a histogram of the resampling data
ggplot(data = resamples, aes(x = p.hat)) +
geom_histogram(
aes(y = ..density..),
) +
geom_density(
color = "purple"
) +
ggtitle("Resampling Data")
# What do we notice about the shape?
# Shape is unimodal and centered around x=0.39
# What is the range of the middle 95%?
lower_boundR <- quantile(resamples$p.hat, 0.025)
upper_boundR <- quantile(resamples$p.hat, 0.975)
middle_rangeR <- upper_boundR - lower_boundR
# Range of middle 95% is ~0.06
# What is the margin of error?
margin_of_error_R = middle_rangeR/2
# Margin of error is ~3%
# This margin of error of ~3% is better than Gallup's margin of error of 4%
####################################################################################################
# Task 3: Simulation over n and p
###########################################################
# Simulation over n
n <- seq(from = 100, to = 3000, by = 10)
margin_errors <- numeric(length(n))
for (i in 1:length(n)) {
current_n <- n[i]
# Generate 10000 simulations for current sample size
simulations <- rbinom(10000, size = current_n, prob = 0.39) / current_n
# Calculate percentiles
lower_bound <- quantile(simulations, 0.025)
upper_bound <- quantile(simulations, 0.975)
# Store half the range (margin of error)
margin_errors[i] <- (upper_bound - lower_bound) / 2
}
# Create a dataframe with results
simulation_results_n <- tibble(
n = n,
margin_of_error = margin_errors
)
###########################################################
# Simulation over p
p <- seq(from = 0.01, to = 0.99, by = 0.01)
margin_errors <- numeric(length(p))
for (i in 1:length(p)) {
current_p <- p[i]
# Generate 10000 simulations for current probability
simulations <- rbinom(10000, size = 1004, prob = current_p) / 1004
# Calculate percentiles
lower_bound <- quantile(simulations, 0.025)
upper_bound <- quantile(simulations, 0.975)
# Store half the range (margin of error)
margin_errors[i] <- (upper_bound - lower_bound) / 2
}
# Create a dataframe with results
simulation_results_p <- tibble(
p = p,
margin_of_error = margin_errors
)
view(simulation_results_n)
view(simulation_results_p)
# Create a heatmap using geom_raster
ggplot(simulation_grid, aes(x = p, y = n, fill = margin_of_error)) +
geom_raster(interpolate = TRUE) +
scale_fill_viridis_c(option = "plasma") +
labs(
title = "Margin of Error as a Function of Sample Size and Probability",
x = "Probability (p)",
y = "Sample Size (n)",
fill = "Margin of Error"
) +
theme_minimal() +
theme(
legend.position = "right",
panel.grid = element_blank()
)
# Create a grid of all n and p combinations
full_grid <- expand.grid(n = n, p = p)
# Calculate theoretical margin of error for each combination
full_grid$margin_of_error <- 1.96 * sqrt(full_grid$p * (1 - full_grid$p) / full_grid$n)
# Create the geom_raster plot
ggplot(full_grid, aes(x = p, y = n, fill = margin_of_error)) +
geom_raster(interpolate = TRUE) +
scale_fill_viridis_c(option = "plasma") +
labs(
title = "Margin of Error by Sample Size and Probability",
x = "Probability (p)",
y = "Sample Size (n)",
fill = "Margin of Error"
) +
geom_hline(yintercept = 1004, linetype = "dashed", color = "white") +
annotate("text", x = 0.05, y = 1100, label = "Typical Gallup sample size (n=1004)",
color = "white", hjust = 0) +
theme_minimal()
?geom_raster
simulation_results_n <- simulation_results_n %>%
mutate(p = 0.39)
simulation_results_p <- simulation_results_p %>%
mutate(n = 1004)
simulation_results_combined <- bind_rows(simulation_results_n, simulation_results_p)
view(simulation_results_combined)
rbind(simulation_results_p, simulation_results_n)
combined_results <- rbind(simulation_results_p, simulation_results_n)
view(combined_results)
####################################################################################################
# Lab 10
library(tidyverse)
####################################################################################################
# Task 1: Basic Simulation
# Use rbinom() to generate data
data_simulation_1 <- tibble(x=rbinom(10000, size = 1004, prob = 0.39)) /1004
# Plot a histogram of the data
ggplot(data = data_simulation_1, aes(x = x)) +
geom_histogram(
aes(y = ..density..),
) +
geom_density(
color = "purple"
) +
ggtitle("Data Simulation (Sample Size = 1004)")
# Shape is unimodal and centered around x=0.39
# mean(data_simulation_1$x)
# What is the range of the middle 95%?
lower_bound <- quantile(data_simulation_1$x, 0.025)
upper_bound <- quantile(data_simulation_1$x, 0.975)
middle_range <- upper_bound - lower_bound
# Range of middle 95% is ~0.06
margin_of_error = middle_range/2
# Margin of error is ~0.03
# This margin of error of ~3% is better than Gallup's margin of error of 4%
###########################################################
# Task 1 Part 2: Repeat Simulation for Double Sample Size
data_simulation_2 <- tibble(x=rbinom(10000, size = 1004*2, prob = 0.39)) /(1004*2)
# Plot a histogram of the data
ggplot(data = data_simulation_2, aes(x = x)) +
geom_histogram(
aes(y = ..density..),
) +
geom_density(
color = "purple"
) +
ggtitle("Data Simulation (Sample Size = 2008)")
# What do we notice about the shape?
# Shape is unimodal and centered around x=0.39
# mean(data_simulation_2$x)
# What is the range of the middle 95%?
lower_bound_2 <- quantile(data_simulation_2$x, 0.025)
upper_bound_2 <- quantile(data_simulation_2$x, 0.975)
middle_range_2 <- upper_bound_2 - lower_bound_2
# Range is ~0.06
margin_of_error_2 = middle_range_2/2
# Margin of error is ~2%
# This margin of error of ~2% is about equal to Gallup's margin of error of 2%
####################################################################################################
# Task 2: Resampling
# Create a df containing data from Gallup Survey
gallup_data <- tibble(
response = c(rep(1, 392), rep(2, 592), rep(0, 20))
)
# Perform Resampling
R = 10000
resamples <- tibble(p.hat = numeric(R))
for( i in 1:R){
# Take a resample
resample <- sample(x = gallup_data$response,
size = 1004,
replace = T)
resamples$p.hat[i] <- mean(resample==1)
}
# Plot a histogram of the resampling data
ggplot(data = resamples, aes(x = p.hat)) +
geom_histogram(
aes(y = ..density..),
) +
geom_density(
color = "purple"
) +
ggtitle("Resampling Data")
# What do we notice about the shape?
# Shape is unimodal and centered around x=0.39
# What is the range of the middle 95%?
lower_boundR <- quantile(resamples$p.hat, 0.025)
upper_boundR <- quantile(resamples$p.hat, 0.975)
middle_rangeR <- upper_boundR - lower_boundR
# Range of middle 95% is ~0.06
# What is the margin of error?
margin_of_error_R = middle_rangeR/2
# Margin of error is ~3%
# This margin of error of ~3% is better than Gallup's margin of error of 4%
####################################################################################################
# Task 3: Simulation over n and p
###########################################################
# Simulation over n
n <- seq(from = 100, to = 3000, by = 10)
margin_errors <- numeric(length(n))
for (i in 1:length(n)) {
current_n <- n[i]
# Generate 10000 simulations for current sample size
simulations <- rbinom(10000, size = current_n, prob = 0.39) / current_n
# Calculate percentiles
lower_bound <- quantile(simulations, 0.025)
upper_bound <- quantile(simulations, 0.975)
# Store half the range (margin of error)
margin_errors[i] <- (upper_bound - lower_bound) / 2
}
# Create a dataframe with results
simulation_results_n <- tibble(
n = n,
margin_of_error_n = margin_errors
)
###########################################################
# Simulation over p
p <- seq(from = 0.01, to = 0.99, by = 0.01)
margin_errors <- numeric(length(p))
for (i in 1:length(p)) {
current_p <- p[i]
# Generate 10000 simulations for current probability
simulations <- rbinom(10000, size = 1004, prob = current_p) / 1004
# Calculate percentiles
lower_bound <- quantile(simulations, 0.025)
upper_bound <- quantile(simulations, 0.975)
# Store half the range (margin of error)
margin_errors[i] <- (upper_bound - lower_bound) / 2
}
# Create a dataframe with results
simulation_results_p <- tibble(
p = p,
margin_of_error_p = margin_errors
)
view(simulation_results_n)
view(simulation_results_p)
combined_results <- rbind(simulation_results_p, simulation_results_n)
combined_results <- bind_rows(simulation_results_p, simulation_results_n)
view(combined_results)
combined_results <- full_join(simulation_results_p, simulation_results_n)
combined_results <- left_join(simulation_results_p, simulation_results_n)
# Combine results
combined_results <- bind_rows(
simulation_results_n %>%
rename(x = n, margin_of_error = margin_of_error_n) %>%
mutate(type = "n (sample size)"),
simulation_results_p %>%
rename(x = p, margin_of_error = margin_of_error_p) %>%
mutate(type = "p (probability)")
)
view(combined_results)
####################################################################################################
# Lab 10
library(tidyverse)
####################################################################################################
# Task 1: Basic Simulation
# Use rbinom() to generate data
data_simulation_1 <- tibble(x=rbinom(10000, size = 1004, prob = 0.39)) /1004
# Plot a histogram of the data
ggplot(data = data_simulation_1, aes(x = x)) +
geom_histogram(
aes(y = ..density..),
) +
geom_density(
color = "purple"
) +
ggtitle("Data Simulation (Sample Size = 1004)")
# Shape is unimodal and centered around x=0.39
# mean(data_simulation_1$x)
# What is the range of the middle 95%?
lower_bound <- quantile(data_simulation_1$x, 0.025)
upper_bound <- quantile(data_simulation_1$x, 0.975)
middle_range <- upper_bound - lower_bound
# Range of middle 95% is ~0.06
margin_of_error = middle_range/2
# Margin of error is ~0.03
# This margin of error of ~3% is better than Gallup's margin of error of 4%
###########################################################
# Task 1 Part 2: Repeat Simulation for Double Sample Size
data_simulation_2 <- tibble(x=rbinom(10000, size = 1004*2, prob = 0.39)) /(1004*2)
# Plot a histogram of the data
ggplot(data = data_simulation_2, aes(x = x)) +
geom_histogram(
aes(y = ..density..),
) +
geom_density(
color = "purple"
) +
ggtitle("Data Simulation (Sample Size = 2008)")
# What do we notice about the shape?
# Shape is unimodal and centered around x=0.39
# mean(data_simulation_2$x)
# What is the range of the middle 95%?
lower_bound_2 <- quantile(data_simulation_2$x, 0.025)
upper_bound_2 <- quantile(data_simulation_2$x, 0.975)
middle_range_2 <- upper_bound_2 - lower_bound_2
# Range is ~0.06
margin_of_error_2 = middle_range_2/2
# Margin of error is ~2%
# This margin of error of ~2% is about equal to Gallup's margin of error of 2%
####################################################################################################
# Task 2: Resampling
# Create a df containing data from Gallup Survey
gallup_data <- tibble(
response = c(rep(1, 392), rep(2, 592), rep(0, 20))
)
# Perform Resampling
R = 10000
resamples <- tibble(p.hat = numeric(R))
for( i in 1:R){
# Take a resample
resample <- sample(x = gallup_data$response,
size = 1004,
replace = T)
resamples$p.hat[i] <- mean(resample==1)
}
# Plot a histogram of the resampling data
ggplot(data = resamples, aes(x = p.hat)) +
geom_histogram(
aes(y = ..density..),
) +
geom_density(
color = "purple"
) +
ggtitle("Resampling Data")
# What do we notice about the shape?
# Shape is unimodal and centered around x=0.39
# What is the range of the middle 95%?
lower_boundR <- quantile(resamples$p.hat, 0.025)
upper_boundR <- quantile(resamples$p.hat, 0.975)
middle_rangeR <- upper_boundR - lower_boundR
# Range of middle 95% is ~0.06
# What is the margin of error?
margin_of_error_R = middle_rangeR/2
# Margin of error is ~3%
# This margin of error of ~3% is better than Gallup's margin of error of 4%
####################################################################################################
# Task 3: Simulation over n and p
###########################################################
# Simulation over n
n <- seq(from = 100, to = 3000, by = 10)
margin_errors <- numeric(length(n))
for (i in 1:length(n)) {
current_n <- n[i]
# Generate 10000 simulations for current sample size
simulations <- rbinom(10000, size = current_n, prob = 0.39) / current_n
# Calculate percentiles
lower_bound <- quantile(simulations, 0.025)
upper_bound <- quantile(simulations, 0.975)
# Store half the range (margin of error)
margin_errors[i] <- (upper_bound - lower_bound) / 2
}
# Create a dataframe with results
simulation_results_n <- tibble(
n = n,
margin_of_error_n = margin_errors
)
###########################################################
# Simulation over p
p <- seq(from = 0.01, to = 0.99, by = 0.01)
margin_errors <- numeric(length(p))
for (i in 1:length(p)) {
current_p <- p[i]
# Generate 10000 simulations for current probability
simulations <- rbinom(10000, size = 1004, prob = current_p) / 1004
# Calculate percentiles
lower_bound <- quantile(simulations, 0.025)
upper_bound <- quantile(simulations, 0.975)
# Store half the range (margin of error)
margin_errors[i] <- (upper_bound - lower_bound) / 2
}
# Create a dataframe with results
simulation_results_p <- tibble(
p = p,
margin_of_error_p = margin_errors
)
###########################################################
# Create a geom_raster() plot
# Combine results
combined_results <- bind_rows(
simulation_results_n %>%
rename(x = n, margin_of_error = margin_of_error_n) %>%
mutate(type = "n (sample size)"),
simulation_results_p %>%
rename(x = p, margin_of_error = margin_of_error_p) %>%
mutate(type = "p (probability)")
)
view(combined_results)
combined_side_by_side <- bind_cols(simulation_results_n, simulation_results_p)
ggplot(margin_error_df, aes(x = n, y = p, fill = margin_of_error)) +
geom_raster(interpolate = TRUE) +
scale_fill_viridis_c(option = "plasma") +
labs(
title = "Margin of Error by Sample Size and True Proportion",
subtitle = "95% Confidence Level",
x = "Sample Size (n)",
y = "True Proportion (p)",
fill = "Margin of Error"
) +
theme_minimal()
# Create grid of n and p
n_vals <- seq(100, 3000, by = 100)
p_vals <- seq(0.01, 0.99, by = 0.01)
# Initialize empty list to store results
grid_results <- expand.grid(n = n_vals, p = p_vals) %>%
mutate(margin_of_error = NA_real_)
# Loop through the grid and calculate margin of error
for (i in 1:nrow(grid_results)) {
n_i <- grid_results$n[i]
p_i <- grid_results$p[i]
sims <- rbinom(10000, size = n_i, prob = p_i) / n_i
lower <- quantile(sims, 0.025)
upper <- quantile(sims, 0.975)
grid_results$margin_of_error[i] <- (upper - lower) / 2
}
view(grid_results)
combined_grid <- expand.grid(
n = simulation_results_n$n,
p = simulation_results_p$p
) %>%
as_tibble()
view(combined_results)
combined_grid <- rbind(simulation_results_p, simulation_results_n)
# Create a geom_raster() plot
# Create a full grid of combinations of n and p
combined_grid <- expand.grid(
n = simulation_results_n$n,
p = simulation_results_p$p
) %>%
as_tibble()
# Repeat the margin_of_error values for each combination
combined_results <- combined_grid %>%
left_join(
simulation_results_n %>% mutate(margin_of_error_n = rep(margin_of_error_n, length(simulation_results_p$p))),
by = "n"
) %>%
left_join(
simulation_results_p %>% mutate(margin_of_error_p = rep(margin_of_error_p, each = length(simulation_results_n$n))),
by = "p"
)
